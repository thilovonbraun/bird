DROP PROCEDURE IF EXISTS GetBalanceDetails;
DROP PROCEDURE IF EXISTS SetTxToSend;
DROP PROCEDURE IF EXISTS GetSentTxStatus;
DELIMITER //
CREATE PROCEDURE GetBalanceDetails(IN BTCAddress CHAR(34))
BEGIN
  DECLARE safeHeight INT DEFAULT 0;
  DECLARE bID INT;
  DECLARE bHash BINARY(20);
  SELECT pkCount INTO safeHeight FROM pkCounters WHERE ID=4;
  SELECT ID, hash160 INTO bID, bHash FROM BitcoinAddress WHERE base58=BTCAddress;
  DROP TEMPORARY TABLE IF EXISTS TempBalanceDetails;
  CREATE TEMPORARY TABLE TempBalanceDetails (
    HASH BINARY(32) NOT NULL,
	TXINDEX INTEGER UNSIGNED,
	TXAMOUNT BIGINT UNSIGNED,
	TYPE SMALLINT,
	NRCONF INTEGER,
	PRIMARY KEY (HASH)
  );
  INSERT INTO TempBalanceDetails(HASH,TXINDEX,TXAMOUNT,TYPE,NRCONF)
    SELECT toa.hash, toa.txindex, toa.txamount, 1, safeHeight-toa.blockheight FROM TxOutAvailable AS toa
	WHERE toa.smartbtcaddr = bID;
  INSERT INTO TempBalanceDetails(HASH,TXINDEX,TXAMOUNT,TYPE,NRCONF)
    SELECT ctx.txHash, ctxout.txOutN, ctxout.value, 2, safeHeight-cbl.height
	FROM ChainBlocks AS cbl
	INNER JOIN (ChainTxs AS ctx INNER JOIN ChainTxOuts AS ctxout ON ctx.blockID=ctxout.blockID AND ctx.txN=ctxout.txN)
	ON cbl.ID=ctx.blockID
	WHERE ctxout.smartIDAdr=BTCAddress AND cbl.height>safeHeight;
  DELETE TempBalanceDetails
    FROM TempBalanceDetails INNER JOIN ChainTxins AS c ON (TempBalanceDetails.HASH=c.opHash AND TempBalanceDetails.TXINDEX=c.opN);
  DELETE TempBalanceDetails
    FROM TempBalanceDetails INNER JOIN TxInUnconfirmed AS c ON (TempBalanceDetails.HASH=c.hash AND TempBalanceDetails.TXINDEX=c.txindex);
  SELECT * FROM TempBalanceDetails ORDER BY NRCONF;
END //
CREATE PROCEDURE SetTxToSend(IN TxData VARBINARY(65500))
BEGIN
  INSERT INTO TxToSend(tx, txStatus)
    VALUES (TxData, 1);
  SELECT LAST_INSERT_ID();
END //
CREATE PROCEDURE GetSentTxStatus(IN txID INTEGER)
BEGIN
  SELECT txStatus FROM TxToSend WHERE ID = txID;
END //
DELIMITER ;